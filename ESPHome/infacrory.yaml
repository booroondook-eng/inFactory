esphome:
  name: infactory
  friendly_name: inFactory
  includes:
    - mycrc4.h
  on_loop:
    if:
      condition:
        api.connected:
      then:
        - lambda: |-
           // if (id(sonoff_temperature).state < 2147483648){
              int channel = 1;
              int ifid = 44;
              int batteryOK = 0;
              uint8_t msg[5];
              msg[0] = ifid;
              int hum = id(sonoff_humidity).state;
              //int hum = id(humidity);
              msg[4] = channel + ((hum % 10) << 4 );
              msg[3] = hum / 10;
              int binTemp = ((id(sonoff_temperature).state * 9/5) + 32 + 90)*10;
              //int binTemp = ((id(temperature) * 9/5) + 32 + 90)*10;
              msg[3] += (binTemp & 0x0F) << 4;
              msg[2] = binTemp >> 4;
              msg[1] = batteryOK << 2;
              msg[1] = (msg[1] & 0x0F) | (msg[4] & 0x0F) << 4;
              uint8_t crc = crc4(msg, 4, 0x13, 0); // Koopmann 0x9, CCITT-4; FP-4; ITU-T G.704
              crc ^= msg[4] >> 4; // last nibble is only XORed
              msg[1] = (msg[1] & 0x0F) | (crc & 0x0F) << 4;
              for (int n=0; n<6; n++){
                for (int i=0; i<10; i++){
                //  digitalWrite(pin_trans, !(i%2));
                  if (i%2){
                    id(gpio_d4).turn_off();
                  }else{
                    id(gpio_d4).turn_on();
                  }  
                  delayMicroseconds(1000);
                }
                delayMicroseconds(7000);
                for (int i = 0; i<5; i++) {
                  for (int b = 7; b>=0; b--) {
                  //  digitalWrite(pin_trans, HIGH);
                    id(gpio_d4).turn_on();
                    delayMicroseconds(700);
                  //  digitalWrite(pin_trans, LOW);        
                    id(gpio_d4).turn_off();
                    if (bitRead(msg[i], b)){
                      delayMicroseconds(4000);
                    }
                    else{
                      delayMicroseconds(1800);
                    }
                  }
                }
                // digitalWrite(pin_trans, HIGH);
                id(gpio_d4).turn_on();
                delayMicroseconds(1000);
                // digitalWrite(pin_trans, LOW);
                id(gpio_d4).turn_off();
                delayMicroseconds(16000);
              }
            //}else{
            //  delay(10000);
            //}
#//            id(msg0) = msg[0];
#//            id(msg1) = msg[1];
#//            id(msg2) = msg[2];
#//            id(msg3) = msg[3];
#//            id(msg4) = msg[4];
esp8266:
  board: nodemcu
logger:
api:
ota:
wifi:
  manual_ip:
    static_ip: 192.168.0.155
    gateway: 192.168.0.1
    subnet: 255.255.255.0
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Infactory Fallback Hotspot"
    password: !secret wifi_password
captive_portal:
web_server:
output:
  - platform: gpio
    pin: D4
    id: gpio_d4  
globals:
  - id: temperature
    type: double
    initial_value: "10.5"
  - id: humidity
    type: int
    initial_value: "92"
#  - id: msg0
#    type: unsigned
#  - id: msg1
#    type: unsigned
#  - id: msg2
#    type: unsigned
#  - id: msg3
#    type: unsigned
#  - id: msg4
#    type: unsigned
button:
  - platform: restart
    name: "Restart"
    entity_category: diagnostic
  - platform: safe_mode
    name: Safe Mode Boot
    entity_category: diagnostic
binary_sensor:
  - platform: status
    name: "Status"
sensor:
  - platform: homeassistant
    name: "Sonoff Temperature"
    id: "sonoff_temperature"
    entity_id: sensor.sonoff_temperature
    unit_of_measurement: °C
    accuracy_decimals: 2
    device_class: temperature
  - platform: homeassistant
    name: "Sonoff Humidity"
    id: "sonoff_humidity"
    entity_id: sensor.sonoff_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: humidity
#  - platform: template
#    name: Temperature
#    id: temperature
#    unit_of_measurement: °C
#    accuracy_decimals: 2
#    device_class: temperature
#    lambda: |-
#      double t = id(sonoff_temperature).state;
#      return t;
#  - platform: template
#    name: Humidity
#    id: humidity
#    unit_of_measurement: "%"
#    accuracy_decimals: 0
#    device_class: humidity
#    lambda: |-
#      int h = id(sonoff_humidity).state;
#      return h;
#  - platform: template
#    name: smsg0
#    id: smsg0
#    accuracy_decimals: 0
#    lambda: |-
#      unsigned smsg0 = id(msg0);
#      return smsg0;
#  - platform: template
#    name: smsg1
#    id: smsg1
#    accuracy_decimals: 0
#    lambda: |-
#      unsigned smsg1 = id(msg1);
#      return smsg1;
#  - platform: template
#    name: smsg2
#    id: smsg2
#    accuracy_decimals: 0
#    lambda: |-
#      unsigned smsg2 = id(msg2);
#      return smsg2;
#  - platform: template
#    name: smsg3
#    id: smsg3
#    accuracy_decimals: 0
#    lambda: |-
#      unsigned smsg3 = id(msg3);
#      return smsg3;
#  - platform: template
#    name: smsg4
#    id: smsg4
#    accuracy_decimals: 0
#    lambda: |-
#      unsigned smsg4 = id(msg4);
#      return smsg4;
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip_address
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: false
time:
  - platform: homeassistant
    id: ntp             
